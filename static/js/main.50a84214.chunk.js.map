{"version":3,"sources":["components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["api","Weather","useState","weather","setWeather","current","setCurrent","query","setQuery","useEffect","fetch","then","res","json","result","console","log","className","type","value","placeholder","onChange","e","target","onKeyPress","key","onClick","main","info","weekday","getDay","date","getDate","month","getMonth","year","getFullYear","Date","name","sys","country","Math","round","temp","feels_like","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAEMA,EACC,mCADDA,EAEE,2CA6FOC,MA1Ff,WAAoB,IAAD,EAEcC,mBAAS,IAFvB,mBAETC,EAFS,KAEAC,EAFA,OAGcF,mBAAS,IAHvB,mBAGTG,EAHS,KAGAC,EAHA,OAIUJ,mBAAS,YAJnB,mBAITK,EAJS,KAIFC,EAJE,KAgDf,OA1CAC,qBAAU,WACNC,MAAM,GAAD,OAAIV,EAAJ,qBAAyBO,EAAzB,+BAAqDP,IACzDW,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJV,EAAWU,GACXC,QAAQC,IAAIF,QAEf,CAACP,IAqCA,sBAAKU,UAAU,aAAf,UAEI,uBAAOC,KAAK,OACRD,UAAU,YACVE,MAAOd,EACPe,YAAY,qBACZC,SACI,SAACC,GACDhB,EAAWgB,EAAEC,OAAOJ,QAGxBK,WAxCQ,SAACF,GACF,IAAXjB,GACc,UAAViB,EAAEG,KACJjB,EAASH,MAwCX,wBAAQqB,QAjDI,WACD,IAAXrB,GACJG,EAASH,IA+CyBY,UAAU,eAAxC,0BAEyB,oBAAhBd,EAAQwB,KAEb,sBAAKV,UAAU,SAAf,UACA,uBACA,yCAzCI,SAAAW,GACZ,IAGIC,EAHc,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAG3DD,EAAKE,UAC3BC,EAAOH,EAAKI,UACZC,EAJY,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAIzGL,EAAKM,YACvBC,EAAOP,EAAKQ,cAEhB,MAAM,GAAN,OAAUP,EAAV,aAAsBI,EAAtB,YAA+BF,EAA/B,aAAwCI,GAgCpBH,CAAQ,IAAIK,SACxB,uBACA,6CAAgBlC,EAAQmC,KAAxB,KAAgCnC,EAAQoC,IAAIC,WAC5C,8CAAiBrC,EAAQA,QAAQ,GAAGwB,QACpC,gDAAmBc,KAAKC,MAAMvC,EAAQwB,KAAKgB,MAA3C,oBAAgEF,KAAKC,MAAMvC,EAAQwB,KAAKiB,YAAxF,cAUA,sBAAK3B,UAAU,eAAf,UAA8B,uBAA9B,0C,MC9ED4B,MARf,WACE,OACE,qBAAK5B,UAAU,MAAf,SACE,cAAC,EAAD,OCIS6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrC,MAAK,YAAkD,IAA/CsC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.50a84214.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\"\r\n\r\nconst api = {\r\n  key: \"2ecc90681044ffa3960e4211bb4ea71d\",\r\n  base: \"https://api.openweathermap.org/data/2.5/\"\r\n}\r\n\r\nfunction Weather() {\r\n\r\n    const[weather, setWeather] = useState({})\r\n    const[current, setCurrent] = useState(\"\")\r\n    const[query, setQuery] = useState(\"Waterloo\")\r\n\r\n    useEffect(() => {\r\n        fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\r\n        .then(res => res.json())\r\n        .then(result => {\r\n          setWeather(result);\r\n          console.log(result);\r\n            })\r\n    }, [query])\r\n\r\n    const handleClick = () => {\r\n        if (current != \"\") {\r\n        setQuery(current)\r\n        }\r\n    }\r\n\r\n    const handleEnter = (e) => {\r\n        if (current != \"\") {\r\n            if (e.key === \"Enter\") {\r\n              setQuery(current)\r\n            }\r\n        }\r\n    }\r\n\r\n    const getDate = info => {\r\n        let weekDayList = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n        let monthList = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n        let weekday = weekDayList[info.getDay()];\r\n        let date = info.getDate();\r\n        let month = monthList[info.getMonth()];\r\n        let year = info.getFullYear();\r\n\r\n        return `${weekday}, ${month} ${date}, ${year}`\r\n    }\r\n\r\n    const handleImage = () => {\r\n        console.log(\"hi\");\r\n        if (weather.weather[0].main == \"clouds\") {\r\n            return \"http://openweathermap.org/img/wn/10d@2x.png\";\r\n        }\r\n    }\r\n\r\n    return(\r\n\r\n        <div className=\"background\">\r\n\r\n            <input type=\"text\"\r\n                className=\"searchbar\" \r\n                value={current} \r\n                placeholder=\"Search Location...\" \r\n                onChange={\r\n                    (e) => {\r\n                    setCurrent(e.target.value)\r\n                    }\r\n                }\r\n                onKeyPress={handleEnter}\r\n            />\r\n\r\n            <button onClick={handleClick} className=\"submitButton\">Get Weather!</button>\r\n\r\n            {(typeof weather.main != \"undefined\") ? (\r\n\r\n                <div className=\"output\">\r\n                <br />\r\n                <div>Date: {getDate(new Date())}</div>\r\n                <br />\r\n                <div>Location: {weather.name}, {weather.sys.country}</div> \r\n                <div>Condition: {weather.weather[0].main}</div>\r\n                <div>Temperature: {Math.round(weather.main.temp)}°C feels like {Math.round(weather.main.feels_like)}°C</div>\r\n                </div>\r\n\r\n\r\n\r\n                //console.log(weather.name), //Waterloo\r\n                //console.log(weather.sys.country), //Canada\r\n                //console.log(weather.weather[0].main), //Cloudy\r\n                //console.log(Math.round(weather.main.temp)) //Temp\r\n\r\n            ) : <div className=\"invalidInput\"><br />Sorry, Please Enter a Valid City</div>}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Weather","import './App.css';\nimport React from \"react\"\nimport Weather from './components/Weather';\nimport \"./style.css\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather />     \n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}